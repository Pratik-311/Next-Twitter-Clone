import { SignInButton, useUser } from "@clerk/nextjs";
import { type NextPage } from "next";
import Head from "next/head";
import Image from "next/image";

import { api } from "~/utils/api";
import type { RouterOutputs } from "~/utils/api"

import { LoadingSpinner } from "~/components/loading";

import dayjs from "dayjs";
import relativeTime from "dayjs/plugin/relativeTime";
import { useState } from "react";
dayjs.extend(relativeTime);

const CreatePostWizard = () => {
    const [input, setInput] = useState<string>("");
    const { user } = useUser();
    if(!user) return null;
    const ctx = api.useContext();
    const { mutate, isLoading: isPosting } = api.posts.create.useMutation({
            onSuccess: () => {
                setInput("");
                void ctx.posts.getAll.invalidate();
            },
        });

    return <div className="flex gap-4 w-full">
        <Image src={user.profileImageUrl} alt="Profile Image" width={56} height={56} className="w-16 h-16 rounded-full"/>
        <input 
            placeholder="Type Emojis Here.." 
            className="bg-transparent outline-none grow"
            type="text"
            value={input}
            onChange={(e) => setInput(e.target.value)}
            disabled={isPosting}
        />
        <button onClick={() => mutate({ content: input })}>Post</button>
    </div>
};

type PostWithUser = RouterOutputs["posts"]["getAll"][number];

const Postview = (props: PostWithUser) => {
    const { post, author } = props;

    return (
        <div key={post.id} className="flex gap-4 p-4 border-b border-slate-400">
            <Image src={author.profileImageUrl} alt={`@${author.username}'s profile picture`} width={56} height={56} className="w-16 h-16 rounded-full"/>
            <div className="flex flex-col">
                <div className="flex gap-1 text-slate-400">
                    <span>{`@${author.username}`}</span>
                    <span className="font-thin">{` . ${dayjs(post.createdAt).fromNow()}`}</span>
                </div>
                <span className="text-2xl">{post.content}</span>
            </div>
        </div>
    );
}

const Feed = () => {
    const { data, isLoading: postsLoading } = api.posts.getAll.useQuery();

    if(postsLoading) return <LoadingSpinner />;
    if(!data) return <div>Something went wrong</div>;

    return(
        <div className="flex flex-col">
            {data?.map((fullPost) => <Postview {...fullPost} key={fullPost.post.id}/>)}
        </div>
    );
};

const Home: NextPage = () => {
  const { isSignedIn, isLoaded: userLoaded } = useUser();
//  const { data, isLoading: postsLoading } = api.posts.getAll.useQuery();
//  we would want to fetch the data here even if we don't use it here is 
//  for early loading, also we can start loading asap for quicker loading 
//  react query would cache the request and know if we are requesting same data twice 
    
    api.posts.getAll.useQuery();

    // return empty div if user isn't loaded yet since user tends to load faster;
    // also clerk and react query hooks are inverted, it is isLoaded for clerk and 
    // is loading for react query;
    if(!userLoaded) return <div />;

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex justify-center h-screen">
          <div className="w-full md:max-w-2xl h-full border-x border-slate-400">
              <div className="flex border-b border-slate-400 p-4">
                  {!isSignedIn && (
                    <div className="flex justify-center">
                        <SignInButton />
                    </div>
                  )}
                  {isSignedIn && <CreatePostWizard />}
              </div>
              <Feed />
          </div>
      </main>
    </>
  );
};

export default Home;
